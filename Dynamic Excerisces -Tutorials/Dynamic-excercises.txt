DYNAMIC PROGRAMMING 
----------------------------------------------------
const fib = (n) => {
if (n <= 2) return 1;
return fib(n-1) + fib(n-2)
};

console.log(fib(6));

//memoization
// js objecy, keys will be arg to fn, value will be the return value


const fib = (n , memo={}) => {
if (n in memo) return memo[n];
if (n <= 2) return 1;
memo[n] = fib(n-1, memo) + fib(n-2, memo)
};


----------------------------------------------------

const gridTraveler= (n,m) =>{
if (m == 1 && n ==1) retrun 1;
if(m==0||n==0)return 0;
return gridTraveler(m-1,n) + gridTraveler(m,n-1);
}

const gridTraveler= (n,m, memo={}) =>{
const key = m+','+n;
if(key in memo) return memo[key];
if (m == 1 && n ==1) retrun 1;
if(m==0||n==0)return 0;
memo[key]= gridTraveler(m-1,n,memo) + gridTraveler(m,n-1,memo);
return memo[key];
}

-------------------------------------------------------

const canSum = (targetSum, numbers) => {
if (targetSum === 0) return true;
if (targetSum < 0) return false;
for (let num of numbers){
const remainder = targetSum - num;
if (canSum(remainder, numbers) === true){
return true;
}
}
return false;
};


const canSum = (targetSum, numbers, memo={}) => {
if (targetSum in memo) return memo[targetSum];
if (targetSum === 0) return true;
if (targetSum < 0) return false;
for (let num of numbers){
const remainder = targetSum - num;
if (canSum(remainder, numbers, memo) === true){
memo[targetSum] = true;
return true;
}
}
memo[targetSum] = false;
return false;
};


---------------------------------------------------
'howSum(targetSum, numbers)'

// time: O(n^m *m)
// space: O(m)
const howSum = (targetSum, numbers= => {
if(targetSum ===0) return[];
if (targetSum <0 ) return null;

for(let num of numbers){
 const remainder = targetSum- num;
const remainderResult= howSum(remainder, numbers);
if (remainderResult !== null){
	return [...remainderResult, num] ;
}
}
retrun null;

};



const howSum = (targetSum, numbers, memo={}) => {
if (targetSum in memo) return memo[targetSum];
if(targetSum ===0) return[];
if (targetSum <0 ) return null;

for(let num of numbers){
 const remainder = targetSum- num;
const remainderResult= howSum(remainder, numbers);
if (remainderResult !== null){
	memo[targetSum]= [...remainderResult, num] ;
}
}
memo[targetSum]=null;
retrun null;

};

-----------------------------------------------------